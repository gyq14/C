generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id           Int            @id @default(autoincrement()) // 用户唯一标识符，自增
  name         String // 用户姓名
  account      String         @unique // 用户账号，唯一，用于登录
  password     String // 用户密码（加密存储）
  contact      String // 用户联系方式
  email        String         @unique // 用户邮箱，唯一
  signature    String? // 用户签名，可选
  department   String? // 用户所在部门，可选
  role         String? // 用户角色，可选
  platformType PlatformType // 用户所属平台类型（内网或供应商）
  permissions  Permissions // 用户权限（用于判断用户进入的界面）
  createdAt    DateTime       @default(now()) // 用户创建时间，默认为当前时间
  updatedAt    DateTime       @updatedAt // 用户更新时间，自动更新为当前时间// 关系
  acceptnotes  Notification[] @relation("sendnote") // 用户发送的通知列表
  sendnotes    Notification[] @relation("receivenote") // 用户接收的通知列表
  todos        Todo[]         @relation("utodos") // 用户的待办事项列表
  apptodos     Todo[]         @relation("applicant") //用户申请的待办事项列表
  apptasks     Task[]         @relation("approvetask") // 用户的待审批任务列表
  restasks     Task[]         @relation("responsetask") // 用户负责的任务列表
  subtasks     Subtask[]      @relation("SubtaskApprover") // 用户的子任务列表
  usertasks    Subtask[]      @relation("SubtaskResponsible") // 用户的子任务列表

  @@unique([account, email])
}

// 通知模型
model Notification {
  id         Int                @id @default(autoincrement()) // 通知唯一标识符，自增
  title      String // 通知标题
  type       NotificationType // 通知类型（例如：信息，提醒等）
  status     NotificationStatus // 通知状态（未读，已读）
  senderId   Int // 通知发送者 ID
  receiverId Int // 通知接收者 ID
  expiry     String // 通知过期时间（时间戳）
  data       Json? // 通知相关数据，JSON 格式，可选
  createdAt  DateTime           @default(now()) // 通知创建时间
  updatedAt  DateTime           @updatedAt // 通知更新时间

  // 关系
  sender   User @relation("sendnote", fields: [senderId], references: [id]) // 通知发送者
  receiver User @relation("receivenote", fields: [receiverId], references: [id]) // 通知接收者

  @@index([senderId]) // 为发送者 ID 添加索引，提高查询效率
  @@index([receiverId]) // 为接收者 ID 添加索引
}

// 代办事项模型
model Todo {
  id          Int      @id @default(autoincrement()) // 代办事项唯一标识符，自增
  title       String // 代办事项标题
  type        TodoType // 代办类型
  status      Status // 代办事项状态
  applicantId Int // 代办事项申请人
  receiverId  Int // 代办事项接收者
  dueDate     String? // 截止日期（时间戳），可选
  data        Json? // 代办事项相关数据，JSON 格式，可选
  createdAt   DateTime @default(now()) // 代办事项创建时间
  updatedAt   DateTime @updatedAt // 代办事项更新时间

  // 关系
  applicant User @relation("applicant", fields: [applicantId], references: [id]) // 申请人
  receiver  User @relation("utodos", fields: [receiverId], references: [id]) // 接收者

  @@index([applicantId])
  @@index([receiverId])
}

// 任务模型
model Task {
  id            Int          @id @default(autoincrement()) // 任务唯一标识符，自增
  title         String // 任务名称
  version       String // 任务版本
  status        TaskStatus // 任务状态
  approverId    Int // 审批人ID
  responsibleId Int // 负责人ID
  dueDate       String // 子任务截止日期（时间戳），可选
  description   String? // 任务描述，可选
  platformType  PlatformType // 任务所属平台类型（内网或供应商）
  createdAt     DateTime     @default(now()) // 任务创建时间
  updatedAt     DateTime     @updatedAt // 任务更新时间
  // 关系
  approver      User         @relation("approvetask", fields: [approverId], references: [id]) // 审批人
  responsible   User         @relation("responsetask", fields: [responsibleId], references: [id]) // 负责人
  subtasks      Subtask[] // 任务下的子任务列表
  attachments   Attachment[] @relation("taskattach")

  @@index([responsibleId])
}

// 子任务模型
model Subtask {
  id            Int           @id @default(autoincrement()) // 子任务唯一标识符，自增
  taskId        Int // 关联的任务 ID
  title         String // 子任务标题
  version       String // 子任务版本
  status        SubtaskStatus @default(AwaitingApproval) // 子任务状态
  approverId    Int // 审批人ID
  responsibleId Int // 负责人员ID
  supplier      String? // 供应商名称，可选
  dueDate       String // 子任务截止日期（时间戳），可选
  description   String? // 子任务描述，可选
  attachments   Attachment[]  @relation("attach") // 附件链接
  data          String // 子任务相关数据
  createdAt     DateTime      @default(now()) // 子任务创建时间
  updatedAt     DateTime      @updatedAt // 子任务更新时间
  // 关系
  task          Task          @relation(fields: [taskId], references: [id]) // 与任务的关系
  approver      User          @relation("SubtaskApprover", fields: [approverId], references: [id]) // 审批人
  responsible   User          @relation("SubtaskResponsible", fields: [responsibleId], references: [id]) // 负责人

  @@index([taskId])
  @@index([responsibleId])
}

//附件
model Attachment {
  id        Int      @id @default(autoincrement())
  fileName  String
  fileType  String?
  uuid      String   @unique
  fileSize  Int
  fileUrl   String
  version   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // 关系
  task      Task?    @relation("taskattach", fields: [taskId], references: [id])
  subtask   Subtask? @relation("attach", fields: [subTaskId], references: [id])
  taskId    Int?
  subTaskId Int?
}

// 枚举定义
enum PlatformType {
  Intranet // 内网
  Supplier // 供应商
}

enum NotificationType {
  Information // 信息
  Reminder // 提醒
  Task // 任务
  Taskback // 任务反馈
  Subtask // 子任务
  Subtaskback // 子任务反馈
  Meeting // 会议
}

enum NotificationStatus {
  Unread // 未读
  Read // 已读
}

enum TodoType {
  Task // 任务
  Taskback // 任务反馈
  Subtask // 子任务
  Subtaskback // 子任务反馈
}

enum Status {
  Pending // 待处理
  Completed // 已完成
  Delayed // 已延期
  InProgress // 进行中
  AwaitingApproval // 待审批
  Rejected //已驳回
}

enum Permissions {
  admin // 管理员
  leader // 领导
  user // 普通用户
}

enum TaskStatus {
  Pending // 待处理
  Completed // 已完成
  Delayed // 已延期
  InProgress // 进行中
  AwaitingApproval // 待审批
  Rejected //已驳回
}

enum SubtaskStatus {
  Pending // 待处理
  Completed // 已完成
  Delayed // 已延期
  InProgress // 进行中
  AwaitingApproval // 待审批
  Rejected //已驳回
}
